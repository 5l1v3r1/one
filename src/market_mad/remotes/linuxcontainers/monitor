#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2018, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

require 'net/http'
require 'uri'
require 'json'
require 'base64'
require 'rexml/document'

class OneMarket
    ONE_MARKET_URL = 'https://images.linuxcontainers.org'
    AGENT          = 'Market Driver'
    VERSION        = File.dirname(__FILE__) + '/../../VERSION'
    IMAGE_SIZE_MB  = 5120
    FILESYSTEM     = 'ext4'
    FORMAT         = 'raw'
    #VERSION     = "5.6.1"

    def initialize(url, image_size_mb, filesystem, format)
        @url   = url || ONE_MARKET_URL
        @size  = image_size_mb || IMAGE_SIZE_MB
        @filesystem = filesystem || FILESYSTEM
        @format = format || FORMAT
        @agent = "OpenNebula #{File.read(VERSION)} (#{AGENT})"
        #@agent = "OpenNebula 5.6.1"
    end

    def get(path)

        # Get proxy params (needed for ruby 1.9.3)
        http_proxy = ENV['http_proxy'] || ENV['HTTP_PROXY']

        if http_proxy
            p_uri   = URI(http_proxy)
            p_host  = p_uri.host
            p_port  = p_uri.port
        else
            p_host  = nil
            p_port  = nil
        end

        uri = URI(@url + path)

        rc = Net::HTTP.get_response(uri)
        if rc.is_a? Net::HTTPRedirection
            redirected_url = rc['location']
            uri = URI(redirected_url)
        end

        req = Net::HTTP::Get.new(uri.request_uri)

        req['User-Agent'] = @agent

        response = Net::HTTP.start(uri.hostname, uri.port, p_host, p_port, :use_ssl => uri.scheme == 'https') {|http|
            http.request(req)
        }

        if response.is_a? Net::HTTPSuccess
            return 0, response.body
        else
            puts response.code.to_i
            puts response.msg
            exit -1
            return response.code.to_i, response.msg
        end
    end

    def get_appliances()
        first_level = '/images/'
        rc, body = get(first_level)
        if rc != 0
            return rc, body
        end
        distros = body.scan(/a href="([a-z].*\/)">/)
        tree = Hash.new
        distros.each do |distro| 
            rc, body = get(first_level + distro[0])
            version = body.scan(/a href="(.*\/)">/)
            #Remove first entry ("Parent Directory")
            version.shift
            version_path = Hash.new
            version.each do |version|
                path = "#{first_level}#{distro[0]}#{version[0]}amd64/default/"
                rc, body = get(path)
                release_dates = body.scan(/a href="(.*\/)">/)
                #Previous release_dates array leaves a point (is in the page html)
                release_date = release_dates.last[0]
                version_path[version[0]] = "#{path}#{release_date}rootfs.tar.xz"
            end 
            tree[distro[0]] = version_path
        end


        appstr  = ""

        tree.each { |distro, value| 
            value.each { |version, path|

            id     = "-1"
            source = "lxd://#{@url}#{path}?size=#{@size}&filesystem=#{@filesystem}&format=#{@format}"
            description = "Downloaded from https://images.linuxcontainers.org"

            tmpl = ""

            print_var(tmpl, "NAME",        "#{distro[0...-1]}_#{version[0...-1]}")
            print_var(tmpl, "SOURCE",      "'#{source}'")
            print_var(tmpl, "IMPORT_ID",   id)
            print_var(tmpl, "ORIGIN_ID",   "-1")
            print_var(tmpl, "TYPE",        "IMAGE")
            print_var(tmpl, "PUBLISHER",   "linuxcontainers.org")
            print_var(tmpl, "FORMAT",      "raw")
            print_var(tmpl, "DESCRIPTION", description)
            print_var(tmpl, "VERSION",     "1.0")
            print_var(tmpl, "TAGS",        "")
            print_var(tmpl, "REGTIME",     "1523362012")
            print_var(tmpl, "SIZE", $size)

            tmpl64 = ""
            print_var(tmpl64, "DRIVER",     "raw")

            if !tmpl64.empty?
                print_var(tmpl, "APPTEMPLATE64", Base64::strict_encode64(tmpl64))
            end


            #puts "tmpl = #{tmpl}"
            #puts "-----------------------------------"
            appstr << "APP=\"#{Base64::strict_encode64(tmpl)}\"\n"
            }
        }

        appstr
    end

    def print_var(str, name, val)
        return if val.nil?
        return if val.class == String && val.empty?

        str << "#{name}=\"#{val}\"\n"
    end

end

################################################################################
# Main Program. Outpust the list of marketplace appliances
################################################################################

begin
    drv_message = Base64::decode64(ARGV[0])
    doc = REXML::Document.new(drv_message).root
    url = doc.elements['MARKETPLACE/TEMPLATE/ENDPOINT'].text rescue nil
    image_size_mb = doc.elements['MARKETPLACE/TEMPLATE/IMAGE_SIZE_MB'].text rescue nil
    filesystem = doc.elements['MARKETPLACE/TEMPLATE/FILESYSTEM'].text rescue nil
    format = doc.elements['MARKETPLACE/TEMPLATE/FORMAT'].text rescue nil
    #url = "https://us.images.linuxcontainers.org"
rescue Exception
end


one_market = OneMarket.new(url, image_size_mb, filesystem, format)
puts one_market.get_appliances


